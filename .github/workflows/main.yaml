name: Continuous integration

on:
  push:
    branches:
      - master
    tags:
      - '*'
  pull_request:

jobs:
  pre-commit:
    name: Pre-commit
    runs-on: ubuntu-22.04
    timeout-minutes: 15
    if: "!startsWith(github.event.head_commit.message, '[skip ci] ')"

    steps:
      - uses: actions/checkout@v3

      - run: echo "${HOME}/.local/bin" >> ${GITHUB_PATH}
      - run: python3 -m pip install --user --requirement=.github/requirements.txt

      - uses: actions/cache@v3
        with:
          path: ~/.cache/pre-commit
          key: pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}
          restore-keys: "pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\npre-commit-"
      - run: pre-commit run --all-files
      - run: git diff --exit-code --patch > /tmp/pre-commit.patch || true
        if: failure()
      - uses: actions/upload-artifact@v4
        with:
          name: Apply pre-commit fix.patch
          path: /tmp/pre-commit.patch
          retention-days: 1
        if: failure()

      - name: Print environment information
        run: c2cciutils-env

  auto-upgrade:
    name: Auto-upgrade
    runs-on: ubuntu-22.04
    timeout-minutes: 15
    if: "!startsWith(github.event.head_commit.message, '[skip ci] ')"

    steps:
      - uses: actions/checkout@v3

      - run: npm install
      - run: npm run upgrade-storybook
      - run: sed --in-place 's/\"^/\"/g' package.json
      - run: npm install --package-lock-only
      - run: git diff --exit-code --patch > /tmp/auto-upgrade.patch
      - uses: actions/upload-artifact@v4
        with:
          name: Storybook automatic migration.patch
          path: /tmp/auto-upgrade.patch
          retention-days: 1
        if: failure()

  main:
    name: Continuous integration
    runs-on: ubuntu-22.04
    timeout-minutes: 15
    if: "!startsWith(github.event.head_commit.message, '[skip ci] ')"
    needs:
      - pre-commit
      - auto-upgrade

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - run: npm install
      - run: npm run check
      - run: npm run lint
      - run: npx chromatic --project-token ${{ secrets.CHROMATIC_PROJECT_TOKEN }}
